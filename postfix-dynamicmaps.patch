diff -uNr old-postfix-2.0.16/conf/dynamicmaps.cf postfix-2.0.16/conf/dynamicmaps.cf
--- old-postfix-2.0.16/conf/dynamicmaps.cf	Thu Jan  1 00:00:00 1970
+++ postfix-2.0.16/conf/dynamicmaps.cf	Thu Sep 25 17:39:44 2003
@@ -0,0 +1,9 @@
+# Postfix dynamic maps configuration file.
+#
+# The first match found is the one that is used.  The only wildcard
+# allowed is '*', which matches everything.  The first %s is expanded
+# to the map type.
+#
+#type  location of .so file                    name of open function
+#====  ================================        =====================
+*      /usr/lib/postfix/dict_%s.so             dict_%s_open
diff -uNr old-postfix-2.0.16/src/dns/Makefile.in postfix-2.0.16/src/dns/Makefile.in
--- old-postfix-2.0.16/src/dns/Makefile.in	Sun Sep 14 00:03:59 2003
+++ postfix-2.0.16/src/dns/Makefile.in	Thu Sep 25 17:41:33 2003
@@ -15,7 +15,7 @@
 LIB_DIR	= ../../lib
 INC_DIR	= ../../include
 
-.c.o:;	$(CC) $(CFLAGS) -c $*.c
+.c.o:; $(CC) -fPIC $(CFLAGS) -c $*.c
 
 all: $(LIB)
 
@@ -27,12 +27,10 @@
 tests:	test
 
 $(LIB):	$(OBJS)
-	$(AR) $(ARFL) $(LIB) $?
-	$(RANLIB) $(LIB)
+	gcc -shared -Wl,-soname,libpostfix-dns.so.1 -o $(LIB) $(OBJS)
 
 $(LIB_DIR)/$(LIB): $(LIB)
 	cp $(LIB) $(LIB_DIR)
-	$(RANLIB) $(LIB_DIR)/$(LIB)
 
 update: $(LIB_DIR)/$(LIB) $(HDRS)
 	-for i in $(HDRS); \
diff -uNr old-postfix-2.0.16/src/global/Makefile.in postfix-2.0.16/src/global/Makefile.in
--- old-postfix-2.0.16/src/global/Makefile.in	Thu Sep 25 17:25:19 2003
+++ postfix-2.0.16/src/global/Makefile.in	Thu Sep 25 17:44:36 2003
@@ -83,8 +83,9 @@
 LIB_DIR	= ../../lib
 INC_DIR	= ../../include
 MAKES	=
+LDAPSO  = dict_ldap.so
 
-.c.o:;	$(CC) $(CFLAGS) -c $*.c
+.c.o:; $(CC) -fPIC $(CFLAGS) -c $*.c
 
 all: $(LIB)
 
@@ -94,14 +95,21 @@
 test:	$(TESTPROG)
 
 $(LIB):	$(OBJS)
-	$(AR) $(ARFL) $(LIB) $?
-	$(RANLIB) $(LIB)
+	gcc -shared -Wl,-soname,libpostfix-global.so.1 -o $(LIB) $(OBJS)
+
+$(LDAPSO): dict_ldap.o
+	gcc -shared -Wl,-soname,dict_ldap.so -o $@ $? -lldap -llber -L../../lib -lutil -L. -lglobal
+
+dict_ldap.c:   ../util/dict_ldap.c
+	ln -f $? $@
 
 $(LIB_DIR)/$(LIB): $(LIB)
 	cp $(LIB) $(LIB_DIR)
-	$(RANLIB) $(LIB_DIR)/$(LIB)
 
-update: $(LIB_DIR)/$(LIB) $(HDRS)
+$(LIB_DIR)/$(LDAPSO): $(LDAPSO)
+	cp $(LDAPSO) $(LIB_DIR)
+	
+update: $(LIB_DIR)/$(LIB) $(LIB_DIR)/${LDAPSO} $(HDRS)
 	-for i in $(HDRS); \
 	do \
 	  cmp -s $$i $(INC_DIR)/$$i 2>/dev/null || cp $$i $(INC_DIR); \
@@ -333,7 +341,7 @@
 	lint $(DEFS) $(SRCS) $(LINTFIX)
 
 clean:
-	rm -f *.o $(LIB) *core $(TESTPROG) junk
+	rm -f *.o $(LIB) $(LDAPSO) dict_ldap.c *core $(TESTPROG) junk
 	rm -rf printfck
 
 tidy:	clean
@@ -508,6 +516,8 @@
 dict_proxy.o: mail_params.h
 dict_proxy.o: clnt_stream.h
 dict_proxy.o: dict_proxy.h
+dict_ldap.o: dict_ldap.c
+dict_ldap.o: ../../include/sys_defs.h
 domain_list.o: domain_list.c
 domain_list.o: ../../include/sys_defs.h
 domain_list.o: ../../include/match_list.h
diff -uNr old-postfix-2.0.16/src/global/mail_conf.c postfix-2.0.16/src/global/mail_conf.c
--- old-postfix-2.0.16/src/global/mail_conf.c	Mon Jan 14 16:24:35 2002
+++ postfix-2.0.16/src/global/mail_conf.c	Thu Sep 25 17:45:47 2003
@@ -175,6 +175,13 @@
     path = concatenate(var_config_dir, "/", "main.cf", (char *) 0);
     dict_load_file(CONFIG_DICT, path);
     myfree(path);
+
+#ifndef NO_DYNAMIC_MAPS
+    path = concatenate(var_config_dir, "/", "dynamicmaps.cf", (char *) 0);
+    dict_open_dlinfo(path);
+    myfree(path);
+#endif
+    
 }
 
 /* mail_conf_eval - expand macros in string */
diff -uNr old-postfix-2.0.16/src/global/mail_params.c postfix-2.0.16/src/global/mail_params.c
--- old-postfix-2.0.16/src/global/mail_params.c	Thu Sep 25 17:25:19 2003
+++ postfix-2.0.16/src/global/mail_params.c	Thu Sep 25 17:50:58 2003
@@ -147,6 +147,8 @@
 #ifdef HAS_DB
 #include <dict_db.h>
 #endif
+#include <safe_open.h>
+#include <mymalloc.h>
 
 /* Global library. */
 
@@ -257,6 +257,7 @@
 char   *var_debug_peer_list;
 int     var_debug_peer_level;
 char   *var_reject_reply_msg_access_denied;
+int     var_command_maxtime;
 int     var_fault_inj_code;
 char   *var_bounce_service;
 char   *var_cleanup_service;
@@ -437,6 +440,39 @@
 		  (long) var_sgid_gid);
 }
 
+static char *read_file(const char *name)
+{
+    char *ret;
+    VSTRING *why=vstring_alloc(1);
+    VSTRING *new_name=vstring_alloc(1);
+    VSTREAM *vp=safe_open(name, O_RDONLY, 0, NULL, -1, -1, why);
+
+    /*
+     * Ugly macros to make complex expressions less unreadable.
+     */
+#define SKIP(start, var, cond) \
+       for (var = start; *var && (cond); var++);
+
+#define TRIM(s) { \
+       char *p; \
+       for (p = (s) + strlen(s); p > (s) && ISSPACE(p[-1]); p--); \
+       *p = 0; \
+    }
+
+    if (!vp) {
+       msg_fatal("%s: unable to open: %s",name,vstring_str(why));
+    }
+    vstring_get_nonl(new_name,vp);
+    vstream_fclose(vp);
+    SKIP(vstring_str(new_name),ret,ISSPACE(*ret));
+    ret=mystrdup(ret);
+    TRIM(ret);
+    vstring_free(why);
+    vstring_free(new_name);
+    return ret;
+}
+
+
 /* mail_params_init - configure built-in parameters */
 
 void    mail_params_init()
@@ -598,6 +634,9 @@
      * Variables that are needed by almost every program.
      */
     get_mail_conf_str_table(other_str_defaults);
+    if (*var_myorigin=='/') {
+	var_myorigin=read_file(var_myorigin);
+    }
     get_mail_conf_int_table(other_int_defaults);
     get_mail_conf_bool_table(bool_defaults);
     get_mail_conf_time_table(time_defaults);
diff -uNr old-postfix-2.0.16/src/master/Makefile.in postfix-2.0.16/src/master/Makefile.in
--- old-postfix-2.0.16/src/master/Makefile.in	Sun Sep 14 00:04:02 2003
+++ postfix-2.0.16/src/master/Makefile.in	Thu Sep 25 17:51:42 2003
@@ -23,7 +23,7 @@
 INC_DIR	= ../../include
 BIN_DIR	= ../../libexec
 
-.c.o:;	$(CC) $(CFLAGS) -c $*.c
+.c.o:; $(CC) `for i in $(LIB_OBJ); do [ $$i = $@ ] && echo -fPIC; done` $(CFLAGS) -c $*.c
 
 all:	$(PROG) $(LIB)
 
@@ -38,12 +38,10 @@
 tests:	test
 
 $(LIB):	$(LIB_OBJ)
-	$(AR) $(ARFL) $(LIB) $?
-	$(RANLIB) $(LIB)
+	gcc -shared -Wl,-soname,libpostfix-master.so.1 -o $(LIB) $(LIB_OBJ)
 
 $(LIB_DIR)/$(LIB): $(LIB)
 	cp $(LIB) $(LIB_DIR)/$(LIB)
-	$(RANLIB) $(LIB_DIR)/$(LIB)
 
 $(BIN_DIR)/$(PROG): $(PROG)
 	 cp $(PROG) $(BIN_DIR)
diff -uNr old-postfix-2.0.16/src/util/dict.h postfix-2.0.16/src/util/dict.h
--- old-postfix-2.0.16/src/util/dict.h	Sun Jan  5 01:03:28 2003
+++ postfix-2.0.16/src/util/dict.h	Thu Sep 25 17:58:07 2003
@@ -80,6 +80,21 @@
   */
 extern ARGV *dict_mapnames(void);
 
+#ifndef NO_DYNAMIC_MAPS
+ /*
+  * Interface for dynamic map loading.
+  */
+typedef struct {
+    const char  *pattern;
+    const char  *soname;
+    const char  *openfunc;
+} DLINFO;
+
+extern void dict_open_dlinfo(const char *path);
+extern DLINFO *dict_open_dlfind(const char *type);
+#endif
+
+
  /*
   * High-level interface, with logical dictionary names.
   */
diff -uNr old-postfix-2.0.16/src/util/dict_open.c postfix-2.0.16/src/util/dict_open.c
--- old-postfix-2.0.16/src/util/dict_open.c	Thu Sep 25 17:25:19 2003
+++ postfix-2.0.16/src/util/dict_open.c	Thu Sep 25 18:03:34 2003
@@ -157,6 +157,8 @@
 #ifdef STRCASECMP_IN_STRINGS_H
 #include <strings.h>
 #endif
+#include <sys/stat.h>
+#include <unistd.h>
 
 /* Utility library. */
 
@@ -182,6 +184,15 @@
 #include <split_at.h>
 #include <htable.h>
 
+#ifndef NO_DYNAMIC_MAPS
+#include <load_lib.h>
+#include <vstring.h>
+#include <vstream.h>
+#include <vstring_vstream.h>
+#include <mvect.h>
+#endif
+
+
  /*
   * lookup table for available map types.
   */
@@ -213,6 +224,7 @@
 #ifdef HAS_NETINFO
     DICT_TYPE_NETINFO, dict_ni_open,
 #endif
+#ifndef MAX_DYNAMIC_MAPS
 #ifdef HAS_LDAP
     DICT_TYPE_LDAP, dict_ldap_open,
 #endif
@@ -222,6 +234,7 @@
 #ifdef HAS_PCRE
     DICT_TYPE_PCRE, dict_pcre_open,
 #endif
+#endif /* MAX_DYNAMIC_MAPS */
 #ifdef HAS_POSIX_REGEXP
     DICT_TYPE_REGEXP, dict_regexp_open,
 #endif
@@ -275,8 +288,39 @@
 
     if (dict_open_hash == 0)
 	dict_open_init();
-    if ((dp = (DICT_OPEN_INFO *) htable_find(dict_open_hash, dict_type)) == 0)
-	msg_fatal("unsupported dictionary type: %s", dict_type);
+    if ((dp = (DICT_OPEN_INFO *) htable_find(dict_open_hash, dict_type)) == 0) {
+#ifndef NO_DYNAMIC_MAPS
+       struct stat st;
+       VSTRING *lib, *func;
+       LIB_FN fn[2];
+       DICT *(*open) (const char *, int, int);
+       DLINFO *dl=dict_open_dlfind(dict_type);
+       if (!dl)
+#endif
+           msg_fatal("%s: unsupported dictionary type: %s", myname, dict_type);
+#ifndef NO_DYNAMIC_MAPS
+       lib=vstring_alloc(1);
+       vstring_sprintf(lib,dl->soname,dict_type);
+       if (stat(vstring_str(lib),&st) < 0) {
+           msg_fatal("%s: unsupported dictionary type: %s (%s not found.  Is the postfix-%s package installed?)",
+               myname, dict_type, vstring_str(lib), dict_type);
+       }
+       func=vstring_alloc(1);
+       vstring_sprintf(func,dl->openfunc,dict_type);
+       fn[0].name = vstring_str(func);
+       fn[0].ptr  = (void**)&open;
+       fn[1].name = NULL;
+       load_library_symbols(vstring_str(lib), fn, NULL);
+       dict_open_register(dict_type, open);
+       dp = (DICT_OPEN_INFO *) htable_find(dict_open_hash, dict_type);
+       vstring_free(lib);
+       vstring_free(func);
+#endif
+    }
+    if (msg_verbose>1) {
+       msg_info("%s: calling %s open routine",myname,dict_type);
+    }
+
     if ((dict = dp->open(dict_name, open_flags, dict_flags)) == 0)
 	msg_fatal("opening %s:%s %m", dict_type, dict_name);
     if (msg_verbose)
@@ -323,6 +367,77 @@
     return mapnames;
 }
 
+
+#ifndef NO_DYNAMIC_MAPS
+static DLINFO  *dict_dlinfo;
+
+void dict_open_dlinfo(const char *path)
+{
+    char    *myname="dict_open_dlinfo";
+    VSTREAM *conf_fp=vstream_fopen(path,O_RDONLY,0);
+    VSTRING *buf = vstring_alloc(100);
+    char    *cp;
+    ARGV    *argv;
+    MVECT    vector;
+    int      nelm=0;
+    int      linenum=0;
+
+    dict_dlinfo=(DLINFO*)mvect_alloc(&vector,sizeof(DLINFO),3,NULL,NULL);
+
+    if (!conf_fp) {
+       msg_warn("%s: cannot open %s.  No dynamic maps will be allowed.",
+               myname, path);
+    } else {
+       while (vstring_get_nonl(buf,conf_fp) != VSTREAM_EOF) {
+           cp = vstring_str(buf);
+           linenum++;
+           if (*cp == '#' || *cp == '\0')
+               continue;
+           argv = argv_split(cp, " \t");
+           if (argv->argc != 3) {
+               msg_fatal("%s: Expected \"pattern .so-name function\" at line %d",
+                         myname, linenum);
+           }
+           if (argv->argv[1][0] != '/') {
+               msg_fatal("%s: .so name must begin with a \"/\" at line %d",
+                         myname, linenum);
+           }
+           if (nelm >= vector.nelm) {
+              dict_dlinfo=(DLINFO*)mvect_realloc(&vector,vector.nelm+3);
+           }
+           dict_dlinfo[nelm].pattern  = mystrdup(argv->argv[0]);
+           dict_dlinfo[nelm].soname   = mystrdup(argv->argv[1]);
+           dict_dlinfo[nelm].openfunc = mystrdup(argv->argv[2]);
+           nelm++;
+           argv_free(argv);
+       }
+    }
+    if (nelm >= vector.nelm) {
+      dict_dlinfo=(DLINFO*)mvect_realloc(&vector,vector.nelm+1);
+    }
+    dict_dlinfo[nelm].pattern  = NULL;
+    dict_dlinfo[nelm].soname   = NULL;
+    dict_dlinfo[nelm].openfunc = NULL;
+    if (conf_fp)
+       vstream_fclose(conf_fp);
+    vstring_free(buf);
+}
+
+DLINFO *dict_open_dlfind(const char *type)
+{
+    DLINFO *dp;
+
+    if (!dict_dlinfo)
+       return NULL;
+
+    for (dp=dict_dlinfo; dp->pattern; dp++) {
+       if (strcmp(dp->pattern,type)==0 || strcmp(dp->pattern,"*")==0)
+           return dp;
+    }
+    return NULL;
+}
+#endif /* !NO_DYNAMIC_MAPS */
+                                                         
 #ifdef TEST
 
  /*
diff -uNr old-postfix-2.0.16/src/util/load_lib.c postfix-2.0.16/src/util/load_lib.c
--- old-postfix-2.0.16/src/util/load_lib.c	Thu Jan  1 00:00:00 1970
+++ postfix-2.0.16/src/util/load_lib.c	Thu Sep 25 18:06:44 2003
@@ -0,0 +1,135 @@
+/*++
+/* NAME
+/*     load_lib 3
+/* SUMMARY
+/*     library loading wrappers
+/* SYNOPSIS
+/*     #include <load_lib.h>
+/*
+/*     extern int  load_library_symbols(const char *, LIB_FN *, LIB_FN *);
+/*     const char *libname;
+/*      LIB_FN     *libfuncs;
+/*      LIB_FN     *libdata;
+/*
+/* DESCRIPTION
+/*     This module loads functions from libraries, returnine pointers
+/*     to the named functions.
+/*
+/*     load_library_symbols() loads all of the desired functions, and
+/*     returns zero for success, or exits via msg_fatal().
+/*
+/* SEE ALSO
+/*     msg(3) diagnostics interface
+/* DIAGNOSTICS
+/*     Problems are reported via the msg(3) diagnostics routines:
+/*     library not found, symbols not found, other fatal errors.
+/* LICENSE
+/* .ad
+/* .fi
+/*     The Secure Mailer license must be distributed with this software.
+/* AUTHOR(S)
+/*     LaMont Jones
+/*     Hewlett-Packard Company
+/*     3404 Harmony Road
+/*     Fort Collins, CO 80528, USA
+/*
+/*     Wietse Venema
+/*     IBM T.J. Watson Research
+/*     P.O. Box 704
+/*     Yorktown Heights, NY 10598, USA
+/*--*/
+
+/* System libraries. */
+
+#include "sys_defs.h"
+#include <stdlib.h>
+#include <stddef.h>
+#include <string.h>
+#if defined(HAS_DLOPEN)
+#include <dlfcn.h>
+#elif defined(HAS_SHL_LOAD)
+#include <dl.h>
+#endif
+
+/* Application-specific. */
+
+#include "msg.h"
+#include "load_lib.h"
+
+extern int  load_library_symbols(const char * libname, LIB_FN * libfuncs, LIB_FN * libdata)
+{
+    char   *myname = "load_library_symbols";
+    LIB_FN *fn;
+
+#if defined(HAS_DLOPEN)
+    void   *handle;
+    char   *emsg;
+
+    handle=dlopen(libname,RTLD_NOW);
+    emsg=dlerror();
+    if (emsg) {
+       msg_fatal("%s: dlopen failure loading %s: %s", myname, libname, emsg);
+    }
+
+    if (libfuncs) {
+       for (fn=libfuncs; fn->name; fn++) {
+           *(fn->ptr) = dlsym(handle,fn->name);
+           emsg=dlerror();
+           if (emsg) {
+               msg_fatal("%s: dlsym failure looking up %s in %s: %s", myname,
+                         fn->name, libname, emsg);
+           }
+           if (msg_verbose>1) {
+               msg_info("loaded %s = %lx",fn->name, *((long*)(fn->ptr)));
+           }
+       }
+    }
+
+    if (libdata) {
+       for (fn=libdata; fn->name; fn++) {
+           *(fn->ptr) = dlsym(handle,fn->name);
+           emsg=dlerror();
+           if (emsg) {
+               msg_fatal("%s: dlsym failure looking up %s in %s: %s", myname,
+                         fn->name, libname, emsg);
+           }
+           if (msg_verbose>1) {
+               msg_info("loaded %s = %lx",fn->name, *((long*)(fn->ptr)));
+           }
+       }
+    }
+#elif defined(HAS_SHL_LOAD)
+    shl_t   handle;
+
+    handle = shl_load(libname,BIND_IMMEDIATE,0);
+
+    if (libfuncs) {
+       for (fn=libfuncs; fn->name; fn++) {
+           if (shl_findsym(&handle,fn->name,TYPE_PROCEDURE,fn->ptr) != 0) {
+             msg_fatal("%s: shl_findsym failure looking up %s in %s: %m",
+                         myname, fn->name, libname);
+           }
+           if (msg_verbose>1) {
+               msg_info("loaded %s = %x",fn->name, *((long*)(fn->ptr)));
+           }
+       }
+    }
+
+    if (libdata) {
+       for (fn=libdata; fn->name; fn++) {
+           if (shl_findsym(&handle,fn->name,TYPE_DATA,fn->ptr) != 0) {
+               msg_fatal("%s: shl_findsym failure looking up %s in %s: %m",
+                         myname, fn->name, libname);
+           }
+           if (msg_verbose>1) {
+               msg_info("loaded %s = %x",fn->name, *((long*)(fn->ptr)));
+           }
+       }
+    }
+
+#else
+    msg_fatal("%s: need dlopen or shl_load support for dynamic libraries",
+               myname);
+#endif
+    return 0;
+}
diff -uNr old-postfix-2.0.16/src/util/load_lib.h postfix-2.0.16/src/util/load_lib.h
--- old-postfix-2.0.16/src/util/load_lib.h	Thu Jan  1 00:00:00 1970
+++ postfix-2.0.16/src/util/load_lib.h	Thu Sep 25 18:07:47 2003
@@ -0,0 +1,40 @@
+#ifndef _LOAD_LIB_H_INCLUDED_
+#define _LOAD_LIB_H_INCLUDED_
+
+/*++
+/* NAME
+/*     load_lib 3h
+/* SUMMARY
+/*     library loading wrappers
+/* SYNOPSIS
+/*     #include "load_lib.h"
+/* DESCRIPTION
+/* .nf
+
+ /*
+  * External interface.
+  */
+/* NULL name terminates list */
+typedef struct LIB_FN {
+    const char *name;
+    void       **ptr;
+} LIB_FN;
+
+extern int  load_library_symbols(const char *, LIB_FN *, LIB_FN *);
+
+/* LICENSE
+/* .ad
+/* .fi
+/*     The Secure Mailer license must be distributed with this software.
+/* AUTHOR(S)
+/*     LaMont Jones
+/*     Hewlett-Packard Company
+/*     3404 Harmony Road
+/*     Fort Collins, CO 80528, USA
+/*
+/*     Wietse Venema
+/*     IBM T.J. Watson Research
+/*     P.O. Box 704
+/*     Yorktown Heights, NY 10598, USA
+
+#endif
diff -uNr old-postfix-2.0.16/src/util/sys_defs.h postfix-2.0.16/src/util/sys_defs.h
--- old-postfix-2.0.16/src/util/sys_defs.h	Thu Sep 11 00:33:31 2003
+++ postfix-2.0.16/src/util/sys_defs.h	Thu Sep 25 18:09:51 2003
@@ -501,6 +501,7 @@
 #define UNIX_DOMAIN_CONNECT_BLOCKS_FOR_ACCEPT
 #define PREPEND_PLUS_TO_OPTSTRING
 #define HAS_POSIX_REGEXP
+#define HAS_DLOPEN
 #define NATIVE_SENDMAIL_PATH "/usr/sbin/sendmail"
 #define NATIVE_MAILQ_PATH "/usr/bin/mailq"
 #define NATIVE_NEWALIAS_PATH "/usr/bin/newaliases"
@@ -529,6 +530,7 @@
 #define UNIX_DOMAIN_CONNECT_BLOCKS_FOR_ACCEPT	/* unverified */
 #define PREPEND_PLUS_TO_OPTSTRING
 #define HAS_POSIX_REGEXP
+#define HAS_DLOPEN
 #define NATIVE_SENDMAIL_PATH "/usr/sbin/sendmail"
 #define NATIVE_MAILQ_PATH "/usr/bin/mailq"
 #define NATIVE_NEWALIAS_PATH "/usr/bin/newaliases"
@@ -567,6 +569,7 @@
 #define USE_STATFS
 #define STATFS_IN_SYS_VFS_H
 #define HAS_POSIX_REGEXP
+#define HAS_SHL_LOAD
 #define NATIVE_SENDMAIL_PATH "/usr/sbin/sendmail"
 #define NATIVE_MAILQ_PATH "/usr/bin/mailq"
 #define NATIVE_NEWALIAS_PATH "/usr/bin/newaliases"
@@ -602,6 +605,7 @@
 #define USE_STATFS
 #define STATFS_IN_SYS_VFS_H
 #define HAS_POSIX_REGEXP
+#define HAS_SHL_LOAD
 #define NATIVE_SENDMAIL_PATH "/usr/sbin/sendmail"
 #define NATIVE_MAILQ_PATH "/usr/bin/mailq"
 #define NATIVE_NEWALIAS_PATH "/usr/bin/newaliases"
